/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 .\public\models\walky_talky.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useState } from 'react'
import { useFrame, useGraph, useLoader } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'

import * as THREE from "three";

const corresponding = {
  A: "A",
  B: "B",
  C: "C",
  D: "D",
  E: "E",
  F: "F",
  G: "A",
  H: "A",
  X: "X"
}

export function Avatar(props) {

  const { playAudio, script } = useControls({
    playAudio: false,
    script: {
      value: "start",
      options: ["start", "after"],
    },
  });

  const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script]);
  const jsonFile = useLoader(THREE.FileLoader, `/audios/${script}.json`);
  const lipsync = JSON.parse(jsonFile);


  useFrame(() => {
    const currentAudioTime = audio.currentTime;

    if (audio.paused || audio.ended) {
      setAnimation("metarig.001|mixamo.com|Layer0")
    }

    Object.values(corresponding).forEach((value) => {

      nodes.Head.morphTargetInfluences[nodes.Head.morphTargetDictionary[value]] = 0;

    });

    for (let i = 0; i < lipsync.mouthCues.length; i++) {
      const mouthCue = lipsync.mouthCues[i];
      if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
        nodes.Head.morphTargetInfluences[nodes.Head.morphTargetDictionary[corresponding[mouthCue.value]]] = 1;
        break;
      }
    }
  });


  useEffect(() => {
    if (playAudio) {
      audio.play();
      if (script === "after") {
        setAnimation("wave");
      } else {
        setAnimation("metarig.001|mixamo.com|Layer0")
      }
    } else {
      audio.pause();
    }
  });


  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/walky_talky.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  const [animation, setAnimation] = useState("metarig.001|mixamo.com|Layer0");

  console.log(animations);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  return (
    <group {...props} dispose={null} ref={group}>
      <group position={[-0.06, -0.985, -0.126]} scale={0.641}>
        <primitive object={nodes.spine} />
        <skinnedMesh geometry={nodes.Body.geometry} material={materials.Material_0} skeleton={nodes.Body.skeleton}
          morphTargetDictionary={[nodes.Head.morphTargetDictionary, nodes.left_eye.morphTargetDictionary, nodes.right_eye.morphTargetDictionary, nodes.left_eyebrow.morphTargetDictionary, nodes.right_eyebrow.morphTargetDictionary]}
          morphTargetInfluences={[nodes.Head.morphInfluences, nodes.left_eye.morphInfluences, nodes.right_eye.morphInfluences, nodes.left_eye.morphInfluences, nodes.right_eyebrow.morphInfluences]} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/walky_talky.glb')
